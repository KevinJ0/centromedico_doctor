{"ast":null,"code":"import { HttpRequest, HttpHandler, HttpEvent, HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { AccountService } from '../services/account.service';\nimport { Observable, BehaviorSubject, throwError } from 'rxjs';\nimport { tap, catchError, switchMap, finalize, filter, take } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/account.service\";\nimport * as i2 from \"@angular/router\";\nexport let JwtInterceptor = /*#__PURE__*/(() => {\n  class JwtInterceptor {\n    constructor(acct, router) {\n      this.acct = acct;\n      this.router = router;\n      this.isTokenRefreshing = false;\n      this.tokenSubject = new BehaviorSubject(null);\n    }\n\n    intercept(request, next) {\n      // Check if the user is logging in for the first time\n      var token = localStorage.getItem('jwt');\n      var authReq = request.clone({\n        setHeaders: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + token\n        }\n      });\n      return next.handle(authReq).pipe(tap(event => {\n        if (event instanceof HttpResponse) {\n          console.log(\"Success\");\n        }\n      }), catchError(err => {\n        if (err instanceof HttpErrorResponse) {\n          //console.log((<HttpErrorResponse>err).status);\n          //console.table((<HttpErrorResponse>err).error);\n          var grantType = \"\";\n          if (request.url.toLowerCase().includes(\"auth\")) grantType = request.body.grantType;\n\n          if (err.status == 401 && grantType == \"refresh_token\") {\n            console.log(\"TokenRefresh has expired\");\n            this.router.navigate(['/paciente-login']);\n            return this.acct.logout();\n          } else {\n            switch (err.status) {\n              case 401:\n                console.log(\"Token expired. Attempting refresh ...\");\n                return this.handleHttpResponseError(request, next);\n\n              case 400:\n                return this.handleError(err);\n              // return <any>this.acct.logout();\n\n              default:\n                return this.handleError(err);\n              // return <any>this.acct.logout();\n            }\n          }\n        } else {\n          return throwError(this.handleError);\n        }\n      }));\n    } // Global error handler method \n\n\n    handleError(errorResponse) {\n      let errorMsg;\n      console.error(errorResponse);\n\n      try {\n        if (errorResponse.error instanceof ErrorEvent) {\n          // A client-side or network error occurred. Handle it accordingly.\n          errorMsg = \"Un error ha ocurrido del lado del cliente: \" + errorResponse.error.message;\n        } else {\n          console.log(typeof errorResponse.error.error[0]);\n\n          if (errorResponse.error.customError && (typeof errorResponse.error.error[0] === 'string' || errorResponse.error instanceof String) && errorResponse.error.error[0].length < 150) {\n            errorMsg = `${errorResponse.error.error[0]}`; // The backend returned an unsuccessful response code.\n          } else {\n            errorMsg = `Ha ocurrido un error al tratar de procesar su petición.`;\n          }\n        }\n      } catch (e) {\n        console.error(e);\n        errorMsg = `Ha ocurrido un error al tratar de procesar su petición.`;\n      }\n\n      return throwError(errorMsg);\n    } // Method to handle http error response\n\n\n    handleHttpResponseError(request, next) {\n      // First thing to check if the token is in process of refreshing\n      if (!this.isTokenRefreshing) // If the Token Refreshing is not true\n        {\n          this.isTokenRefreshing = true; // Any existing value is set to null\n          // Reset here so that the following requests wait until the token comes back from the refresh token API call\n\n          this.tokenSubject.next(null); /// call the API to refresh the token\n\n          return this.acct.getNewRefreshToken().pipe(switchMap(tokenresponse => {\n            if (tokenresponse) {\n              this.tokenSubject.next(tokenresponse.authToken.token);\n              localStorage.setItem('loginStatus', '1');\n              localStorage.setItem('jwt', tokenresponse.authToken.token);\n              localStorage.setItem('username', tokenresponse.authToken.username);\n              localStorage.setItem('expiration', tokenresponse.authToken.expiration);\n              localStorage.setItem('userRole', tokenresponse.authToken.roles);\n              localStorage.setItem('refreshToken', tokenresponse.authToken.refresh_token);\n              console.log(\"Token refreshed...\");\n              return next.handle(this.attachTokenToRequest(request));\n            }\n\n            return this.acct.logout();\n          }), catchError(err => {\n            //this.acct.logout();\n            return this.handleError(err);\n          }), finalize(() => {\n            this.isTokenRefreshing = false;\n          }));\n        } else {\n        this.isTokenRefreshing = false;\n        return this.tokenSubject.pipe(filter(token => token != null), take(1), switchMap(token => {\n          return next.handle(request);\n        }));\n      }\n    }\n\n    attachTokenToRequest(request) {\n      var token = localStorage.getItem('jwt');\n      return request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n\n  }\n\n  JwtInterceptor.ɵfac = function JwtInterceptor_Factory(t) {\n    return new (t || JwtInterceptor)(i0.ɵɵinject(i1.AccountService), i0.ɵɵinject(i2.Router));\n  };\n\n  JwtInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JwtInterceptor,\n    factory: JwtInterceptor.ɵfac,\n    providedIn: 'root'\n  });\n  return JwtInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}