{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, throwError, Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(router, http, baseUrl) {\n      this.router = router;\n      this.http = http; // Url to access to the Web API\n      // Token Controller\n\n      this.baseUrlRegister = \"api/token/register\";\n      this.baseUrlToken = \"api/token/auth\"; // User related properties\n\n      this.loginStatus = new BehaviorSubject(this.checkLoginStatus());\n      this.UserName = new BehaviorSubject(localStorage.getItem('userName'));\n      this.UserRole = new BehaviorSubject(localStorage.getItem('userRoles'));\n      this.baseUrl = baseUrl;\n    }\n\n    getNewRefreshToken() {\n      let usercredential = localStorage.getItem('userName');\n      let refreshToken = localStorage.getItem('refreshToken');\n      const grantType = \"refresh_token\";\n      return this.http.post(this.baseUrl + this.baseUrlToken, {\n        usercredential,\n        refreshToken,\n        grantType\n      }).pipe(map(result => {\n        if (result && result.authToken.token) {\n          this.loginStatus.next(true);\n          localStorage.setItem('loginStatus', '1');\n          localStorage.setItem('jwt', result.authToken.token);\n          localStorage.setItem('userName', result.authToken.username);\n          localStorage.setItem('expiration', result.authToken.expiration);\n          localStorage.setItem('userRole', result.authToken.roles);\n          localStorage.setItem('refreshToken', result.authToken.refresh_token);\n        }\n\n        return result;\n      }));\n    } //Login Method\n\n\n    Login(userCredential, password) {\n      const grantType = \"password\";\n      return this.http.post(this.baseUrl + this.baseUrlToken, {\n        userCredential,\n        password,\n        grantType\n      }).pipe(map(result => {\n        // login successful if there's a jwt token in the response\n        if (result && result.authToken.token) {\n          // store user details and jwt token in local storage to keep user logged in between page refreshes\n          this.setUserResult(result);\n        }\n\n        console.log(result);\n        return result;\n      }));\n    } //Signup Method\n\n\n    Signup(email, password) {\n      return this.http.post(this.baseUrl + this.baseUrlRegister, {\n        email,\n        password\n      }).pipe(map(result => {\n        // login successful if there's a jwt token in the response\n        if (result && result.authToken.token) {\n          // store user details and jwt token in local storage to keep user logged in between page refreshes\n          this.setUserResult(result);\n        }\n\n        console.log(result);\n        return result;\n      }));\n    }\n\n    setUserResult(result) {\n      this.loginStatus.next(true);\n      localStorage.setItem('loginStatus', '1');\n      localStorage.setItem('jwt', result.authToken.token);\n      localStorage.setItem('userName', result.authToken.username);\n      localStorage.setItem('expiration', result.authToken.expiration);\n      localStorage.setItem('userRole', result.authToken.roles);\n      localStorage.setItem('refreshToken', result.authToken.refresh_token);\n      this.UserName.next(result.authToken.username);\n      this.UserRole.next(result.authToken.roles);\n    }\n\n    checkLoginStatus() {\n      var loginCookie = localStorage.getItem(\"loginStatus\");\n\n      if (loginCookie == \"1\") {\n        if (localStorage.getItem('jwt') != null || localStorage.getItem('jwt') != undefined) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    isUserDocIdentConfirm() {\n      return this.http.get(this.baseUrl + \"api/account/isUserDocIdentConfirm\").pipe(map(result => {\n        return result;\n      }));\n    }\n\n    getUserInfo() {\n      return this.http.get(this.baseUrl + \"api/account/getUserInfo\").pipe(map(data => data), catchError(err => {\n        return throwError(err);\n      }));\n    }\n\n    setUserInfo(userInfo) {\n      return this.http.post(this.baseUrl + \"api/account/setUserInfo\", userInfo).pipe(map(() => true), catchError(err => {\n        return throwError(err);\n      }));\n    }\n\n    logout() {\n      // Set Loginstatus to false and delete saved jwt cookie\n      this.loginStatus.next(false);\n      this.UserName.next(null);\n      this.UserRole.next(null);\n      localStorage.removeItem('jwt');\n      localStorage.removeItem('refreshToken');\n      localStorage.removeItem('userRole');\n      localStorage.removeItem('userName');\n      localStorage.removeItem('expiration');\n      localStorage.setItem('loginStatus', '0');\n      console.log(\"Logged Out Successfully\");\n    }\n\n    get isLoggesIn() {\n      if (localStorage.getItem(\"loginStatus\")) this.loginStatus.next(localStorage.getItem(\"loginStatus\").toLowerCase() == '1');\n      console.log(localStorage.getItem(\"loginStatus\"));\n      return this.loginStatus.asObservable();\n    }\n\n    get currentUserName() {\n      this.UserName.next(localStorage.getItem(\"userName\"));\n      return this.UserName.asObservable();\n    }\n\n    get currentUserRole() {\n      this.UserRole.next(localStorage.getItem(\"UserRole\"));\n      return this.UserRole.asObservable();\n    }\n\n  }\n\n  AccountService.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject('BASE_URL'));\n  };\n\n  AccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac,\n    providedIn: 'root'\n  });\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module"}