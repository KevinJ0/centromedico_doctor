{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { FormBuilder, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AccountService } from 'src/app/services/account.service';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { AutoUnsubscribe } from \"ngx-auto-unsubscribe\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/account.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/card\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/progress-spinner\";\n\nfunction LoginComponent_mat_card_content_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-card-content\", 3);\n  }\n\n  if (rf & 2) {\n    i0.ɵɵproperty(\"@inOutAnimation\", undefined);\n  }\n}\n\nfunction LoginComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵelement(1, \"mat-progress-spinner\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"mode\", ctx_r2.mode);\n  }\n}\n\nlet LoginComponent = class LoginComponent {\n  constructor(router, rutaActiva, accountSvc, _formBuilder) {\n    this.router = router;\n    this.rutaActiva = rutaActiva;\n    this.accountSvc = accountSvc;\n    this._formBuilder = _formBuilder;\n    this.mode = 'indeterminate';\n    this.loading = false;\n    this.invalidLogin = false; //go back user is already logged in\n\n    if (this.accountSvc.checkLoginStatus()) this.router.navigate(['..']);\n  }\n\n  showError(message) {}\n\n  ngOnInit() {\n    this.returnUrl = this.rutaActiva.snapshot.queryParams['returnUrl'] || '/';\n    this.loginFormGroup = this._formBuilder.group({\n      loginEmailControl: ['', [Validators.required, Validators.email]],\n      loginPasswordControl: ['', Validators.required]\n    });\n    this.signupFormGroup = this._formBuilder.group({\n      signupEmailControl: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required]],\n      password2: ['', [Validators.required]]\n    }, {\n      validator: passwordMatchValidator\n    });\n  }\n\n  get password() {\n    return this.signupFormGroup.get('password');\n  }\n\n  get password2() {\n    return this.signupFormGroup.get('password2');\n  }\n\n  onPasswordInput() {\n    if (this.signupFormGroup.hasError('passwordMismatch')) this.password2.setErrors([{\n      'passwordMismatch': true\n    }]);else this.password2.setErrors(null);\n  }\n\n  Login() {\n    if (this.loginFormGroup.valid) {\n      if (!this.loading) {\n        this.loading = true;\n        const credentials = JSON.stringify(this.loginFormGroup.value);\n        let userLogin = this.loginFormGroup.value;\n        this.accountSvc.Login(userLogin.loginEmailControl, userLogin.loginPasswordControl).subscribe(result => {\n          this.loading = false;\n          let token = result.authToken.token;\n          console.log(\"User Logged In Successfully\");\n          this.invalidLogin = false;\n          this.router.navigateByUrl(this.returnUrl);\n        }, error => {\n          this.invalidLogin = true;\n          this.loading = false;\n          this.ErrorMessage = \"Ha ocurrido un error al intentar iniciar sessión\";\n          this.showError(error);\n          console.log(error);\n        });\n      }\n    }\n  }\n\n  Signup() {\n    if (this.signupFormGroup.valid) {\n      if (!this.loading) {\n        this.loading = true;\n        let userSignup = this.signupFormGroup.value;\n        this.accountSvc.Signup(userSignup.signupEmailControl, userSignup.password).subscribe(result => {\n          this.loading = false;\n          let token = result.authToken.token;\n          console.log(\"User Register and Login In Successfully\");\n          this.router.navigateByUrl(this.returnUrl);\n        }, error => {\n          this.invalidLogin = true;\n          this.loading = false;\n          this.ErrorMessage = \"Ha ocurrido un error al intentar iniciar sessión\";\n          this.showError(error);\n          console.log(error);\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {}\n\n};\n\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.AccountService), i0.ɵɵdirectiveInject(i3.FormBuilder));\n};\n\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 6,\n  vars: 2,\n  consts: [[1, \"content-wrapper\"], [\"class\", \"acceso\", 4, \"ngIf\", \"ngIfElse\"], [\"load\", \"\"], [1, \"acceso\"], [1, \"progress-content\"], [2, \"margin\", \"auto\", 3, \"mode\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"main\");\n      i0.ɵɵelementStart(1, \"div\", 0);\n      i0.ɵɵelementStart(2, \"mat-card\");\n      i0.ɵɵtemplate(3, LoginComponent_mat_card_content_3_Template, 1, 1, \"mat-card-content\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(4, LoginComponent_ng_template_4_Template, 2, 1, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(5);\n\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", !ctx.loading)(\"ngIfElse\", _r1);\n    }\n  },\n  directives: [i4.MatCard, i5.NgIf, i4.MatCardContent, i6.MatProgressSpinner],\n  styles: [\"\"],\n  data: {\n    animation: [trigger('inOutAnimation', [transition(':enter', [style({\n      opacity: 0\n    }), animate('30ms ease-out', style({\n      opacity: 1\n    }))]), transition(':leave', [style({\n      opacity: 1,\n      position: \"absolute\"\n    }), animate('10ms ease-in', style({\n      opacity: 0,\n      position: \"relative\"\n    }))])])]\n  }\n});\nLoginComponent = __decorate([AutoUnsubscribe(), __metadata(\"design:paramtypes\", [Router, ActivatedRoute, AccountService, FormBuilder])], LoginComponent);\nexport { LoginComponent };\nexport const passwordMatchValidator = formGroup => {\n  if (formGroup.get('password').value === formGroup.get('password2').value) return null;else return {\n    passwordMismatch: true\n  };\n};","map":null,"metadata":{},"sourceType":"module"}